{
	"info": {
		"_postman_id": "188c2bc3-8b61-435f-a12b-d507f8cc88f6",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27072916"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Создание комментария без text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Correct",
			"item": [
				{
					"name": "Создание комментария к событию c id: 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, author, text, createDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.author).to.not.be.null;\r",
									"    pm.expect(target.text).equal(target.text, 'Текст комментария должен совпадать с отправленным');\r",
									"    pm.expect(target.createDate).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var current_timestamp = new Date();\r",
									"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \"text\":\"корректно\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "60"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Not Found",
			"item": [
				{
					"name": "Запрос комментариев по не существующему событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: message, reason, status, timestamp\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать ожидаемым\", function () {\r",
									"pm.expect(\"Событие с id: 10000 не найдено\").equal(target.message, 'Сообщение об ошибке должно соответствовать Событие с id: 10000 не найдено');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Создание второго комментария к событию с id: 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, author, text, createDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.author).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.text).equal(target.text, 'Текст комментария должен совпадать с отправленным');\r",
									"    pm.expect(target.createDate).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \"text\":\"второй комментарий\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария событию c id: 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, author, text, createDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария не совпадает с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\":\"комментарий\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "15"
								},
								{
									"key": "eventId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев (2) по событию с id: 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, author, text, createDate\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('createDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать два комментария\", function () {\r",
									"pm.expect(Array.isArray(target)).equal(true, 'Ответ не является массивом объектов');\r",
									"pm.expect(Object.keys(target).length).equal(2, 'Некорректное количество комментариев');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить комментарии пользователя с id: 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, author, text, createDate\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('createDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать один комментарий пользователя\", function () {\r",
									"pm.expect(Array.isArray(target)).equal(true, 'Ответ не является массивом объектов');\r",
									"pm.expect(Object.keys(target).length).equal(1, 'Количество комментариев не сооответствует действительному количеству');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание 2 комментария для пользователя с id: 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, author, text, createDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(\"второй комментарий того же пользователя\").equal(target.text, 'Текст комментария должен совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \"text\":\"второй комментарий того же пользователя\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "15"
								},
								{
									"key": "eventId",
									"value": "67"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список комментариев пользователя 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, author, text, createDate\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('createDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать два комментария пользователя\", function () {\r",
									"pm.expect(Array.isArray(target)).equal(true, 'Ответ не является массивом объектов');\r",
									"pm.expect(Object.keys(target).length).equal(2, 'Количество комментариев не сооответствует действительному количеству');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария ко 2 событию 60 пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, author, text, createDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(\"Обновленный комментарий\").equal(target.text, 'Текст комментария должен совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \"text\":\"Обновленный комментарий\"}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "60"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка обновления чужого комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: message, reason, status, timestamp\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Ошибка. Только автору сообщения или администратору доступно редактирование\", function () {\r",
									"    pm.expect(\"Ошибка. Только автору сообщения или администратору доступно редактирование\").equal(target.message, 'Сообщение не содержит соотвествующее сообщение об ошибке');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \"text\":\"Чужой комментарий\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "60"
								},
								{
									"key": "commentId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление администратором комментария  пользователя с id: 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список комментариев пользователя 15 после удаления Администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, author, text, createDate\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('createDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать один комментарий пользователя\", function () {\r",
									"pm.expect(Array.isArray(target)).equal(true, 'Ответ не является массивом объектов');\r",
									"pm.expect(Object.keys(target).length).equal(1, 'Количество комментариев не сооответствует действительному количеству');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "15"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}